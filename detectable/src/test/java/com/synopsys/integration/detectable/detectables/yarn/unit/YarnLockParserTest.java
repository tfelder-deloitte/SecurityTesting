/**
 * detectable
 *
 * Copyright (c) 2020 Synopsys, Inc.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.synopsys.integration.detectable.detectables.yarn.unit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import com.synopsys.integration.detectable.annotations.UnitTest;
import com.synopsys.integration.detectable.detectables.yarn.parse.YarnLock;
import com.synopsys.integration.detectable.detectables.yarn.parse.YarnLockDependency;
import com.synopsys.integration.detectable.detectables.yarn.parse.YarnLockEntry;
import com.synopsys.integration.detectable.detectables.yarn.parse.YarnLockEntryId;
import com.synopsys.integration.detectable.detectables.yarn.parse.YarnLockParser;

@UnitTest
public class YarnLockParserTest {

    @Test
    void testThatYarnLockIsParsedCorrectlyToMap() {
        final List<String> yarnLockText = new ArrayList<>();
        yarnLockText.add("# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.");
        yarnLockText.add("# yarn lockfile v1");
        yarnLockText.add("");
        yarnLockText.add("");
        yarnLockText.add("async@0.9.0:");
        yarnLockText.add("  version \"0.9.0\"");
        yarnLockText.add("  resolved \"http://nexus.fr.murex.com/nexus3/repository/npm-all/async/-/async-0.9.0.tgz#ac3613b1da9bed1b47510bb4651b8931e47146c7\"");
        yarnLockText.add("colors@~1.0.3:");
        yarnLockText.add("  version \"1.0.3\"");
        yarnLockText.add("  resolved \"http://nexus.fr.murex.com/nexus3/repository/npm-all/colors/-/colors-1.0.3.tgz#0433f44d809680fdeb60ed260f1b0c262e82a40b\"");

        final YarnLockParser yarnLockParser = new YarnLockParser();
        final YarnLock yarnLock = yarnLockParser.parseYarnLock(yarnLockText);

        assertEntry(yarnLock, "async", "0.9.0", "0.9.0");
        assertEntry(yarnLock, "colors", "~1.0.3", "1.0.3");
    }

    @Test
    void testThatYarnLockVersionsResolveAsExpected() {
        final List<String> yarnLockText = new ArrayList<>();
        yarnLockText.add("http-proxy@^1.8.1:");
        yarnLockText.add("  version \"1.16.2\"");
        yarnLockText.add("  resolved \"http://nexus.fr.murex.com/nexus3/repository/npm-all/http-proxy/-/http-proxy-1.16.2.tgz#06dff292952bf64dbe8471fa9df73066d4f37742\"");
        yarnLockText.add("  dependencies:");
        yarnLockText.add("    eventemitter3 \"1.x.x\"");
        yarnLockText.add("    requires-port \"1.x.x\"");
        yarnLockText.add("http-server@^0.9.0:");
        yarnLockText.add("  version \"0.9.0\"");
        yarnLockText.add("  resolved \"http://nexus.fr.murex.com/nexus3/repository/npm-all/http-server/-/http-server-0.9.0.tgz#8f1b06bdc733618d4dc42831c7ba1aff4e06001a\"");

        final YarnLockParser yarnLockParser = new YarnLockParser();
        final YarnLock yarnLock = yarnLockParser.parseYarnLock(yarnLockText);

        assertEntry(yarnLock, "http-proxy", "^1.8.1", "1.16.2", new YarnLockDependency("eventemitter3", "1.x.x", false), new YarnLockDependency("requires-port", "1.x.x", false));
        assertEntry(yarnLock, "http-server", "^0.9.0", "0.9.0");
    }

    @Test
    void testThatMultipleDepsPerLineCanBeHandledCorrectly() {
        final List<String> yarnLockText = new ArrayList<>();
        yarnLockText.add("debug@2, debug@2.6.9, debug@^2.2.0, debug@^2.3.3, debug@~2.6.4, debug@~2.6.6:");
        yarnLockText.add("  version \"2.6.9\"");
        yarnLockText.add("  resolved \"http://nexus/nexus3/repository/npm-all/debug/-/debug-2.6.9.tgz#5d128515df134ff327e90a4c93f4e077a536341f\"");
        yarnLockText.add("  dependencies:");
        yarnLockText.add("    ms \"2.0.0\"");

        final YarnLockParser yarnLockParser = new YarnLockParser();
        final YarnLock yarnLock = yarnLockParser.parseYarnLock(yarnLockText);

        assertEntry(yarnLock, "debug", "2", "2.6.9", new YarnLockDependency("ms", "2.0.0", false));
        assertEntry(yarnLock, "debug", "2.6.9", "2.6.9", new YarnLockDependency("ms", "2.0.0", false));
        assertEntry(yarnLock, "debug", "^2.2.0", "2.6.9", new YarnLockDependency("ms", "2.0.0", false));
        assertEntry(yarnLock, "debug", "^2.3.3", "2.6.9", new YarnLockDependency("ms", "2.0.0", false));
        assertEntry(yarnLock, "debug", "~2.6.4", "2.6.9", new YarnLockDependency("ms", "2.0.0", false));
        assertEntry(yarnLock, "debug", "~2.6.6", "2.6.9", new YarnLockDependency("ms", "2.0.0", false));

    }

    @Test
    void testThatDependenciesWithQuotesAreResolvedCorrectly() {
        final List<String> yarnLockText = new ArrayList<>();
        yarnLockText.add("\"cssstyle@>= 0.2.37 < 0.3.0\":");
        yarnLockText.add("  version \"0.2.37\"");
        yarnLockText.add("  resolved \"http://nexus/nexus3/repository/npm-all/cssstyle/-/cssstyle-0.2.37.tgz#541097234cb2513c83ceed3acddc27ff27987d54\"");
        yarnLockText.add("  dependencies:");
        yarnLockText.add("    cssom \"0.3.x\"");

        final YarnLockParser yarnLockParser = new YarnLockParser();
        final YarnLock yarnLock = yarnLockParser.parseYarnLock(yarnLockText);

        assertEntry(yarnLock, "cssstyle", ">= 0.2.37 < 0.3.0", "0.2.37", new YarnLockDependency("cssom", "0.3.x", false));
    }

    @Test
    void testParserHandlesMissingSymbol() {
        YarnLockParser yarnLockParser = new YarnLockParser();
        List<YarnLockEntryId> ids = yarnLockParser.parseMultipleEntryLine("example, example@1");
        Assertions.assertEquals(2, ids.size());
        Assertions.assertEquals(ids.get(0).getName(), "example");
        Assertions.assertEquals(ids.get(0).getVersion(), "");
        Assertions.assertEquals(ids.get(1).getName(), "example");
        Assertions.assertEquals(ids.get(1).getVersion(), "1");
    }

    @Test
    void handlesSymbolInName() {
        YarnLockParser yarnLockParser = new YarnLockParser();
        List<YarnLockEntryId> ids = yarnLockParser.parseMultipleEntryLine("@example");
        Assertions.assertEquals(1, ids.size());
        Assertions.assertEquals(ids.get(0).getName(), "@example");
        Assertions.assertEquals(ids.get(0).getVersion(), "");
    }

    void assertEntry(final YarnLock yarnLock, final String idName, final String idVersion, final String resolvedVersion, final YarnLockDependency... dependencies) {
        boolean found = false;
        for (final YarnLockEntry entry : yarnLock.getEntries()) {
            for (final YarnLockEntryId entryId : entry.getIds()) {
                if (entryId.getName().equals(idName) && entryId.getVersion().equals(idVersion)) {
                    found = true;
                    assertEquals(resolvedVersion, entry.getVersion(), "Yarn entry should have found correct resolved version.");
                    assertEquals(dependencies.length, entry.getDependencies().size(), "Yarn entry should have found correct number of dependencies.");
                    for (final YarnLockDependency dependency : dependencies) {
                        boolean dFound = false;
                        for (final YarnLockDependency entryDependency : entry.getDependencies()) {
                            if (entryDependency.getName().equals(dependency.getName()) && entryDependency.getVersion().equals(dependency.getVersion()) && entryDependency.isOptional() == dependency.isOptional()) {
                                dFound = true;
                            }
                        }
                        assertTrue(dFound, "Could not find yarn dependency for entry " + idName + " with name " + dependency.getName() + " and version " + dependency.getVersion() + " and optional " + dependency.isOptional() + ".");
                    }
                }
            }
        }
        assertTrue(found, "Could not find yarn lock entry with name " + idName + " and version " + idVersion + ".");
    }
}
